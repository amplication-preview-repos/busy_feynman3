/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CsvFile } from "./CsvFile";
import { CsvFileCountArgs } from "./CsvFileCountArgs";
import { CsvFileFindManyArgs } from "./CsvFileFindManyArgs";
import { CsvFileFindUniqueArgs } from "./CsvFileFindUniqueArgs";
import { CreateCsvFileArgs } from "./CreateCsvFileArgs";
import { UpdateCsvFileArgs } from "./UpdateCsvFileArgs";
import { DeleteCsvFileArgs } from "./DeleteCsvFileArgs";
import { RecordFindManyArgs } from "../../record/base/RecordFindManyArgs";
import { Record } from "../../record/base/Record";
import { CsvFileService } from "../csvFile.service";
@graphql.Resolver(() => CsvFile)
export class CsvFileResolverBase {
  constructor(protected readonly service: CsvFileService) {}

  async _csvFilesMeta(
    @graphql.Args() args: CsvFileCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CsvFile])
  async csvFiles(
    @graphql.Args() args: CsvFileFindManyArgs
  ): Promise<CsvFile[]> {
    return this.service.csvFiles(args);
  }

  @graphql.Query(() => CsvFile, { nullable: true })
  async csvFile(
    @graphql.Args() args: CsvFileFindUniqueArgs
  ): Promise<CsvFile | null> {
    const result = await this.service.csvFile(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CsvFile)
  async createCsvFile(
    @graphql.Args() args: CreateCsvFileArgs
  ): Promise<CsvFile> {
    return await this.service.createCsvFile({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CsvFile)
  async updateCsvFile(
    @graphql.Args() args: UpdateCsvFileArgs
  ): Promise<CsvFile | null> {
    try {
      return await this.service.updateCsvFile({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CsvFile)
  async deleteCsvFile(
    @graphql.Args() args: DeleteCsvFileArgs
  ): Promise<CsvFile | null> {
    try {
      return await this.service.deleteCsvFile(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Record], { name: "records" })
  async findRecords(
    @graphql.Parent() parent: CsvFile,
    @graphql.Args() args: RecordFindManyArgs
  ): Promise<Record[]> {
    const results = await this.service.findRecords(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
