/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FtpConfigService } from "../ftpConfig.service";
import { FtpConfigCreateInput } from "./FtpConfigCreateInput";
import { FtpConfig } from "./FtpConfig";
import { FtpConfigFindManyArgs } from "./FtpConfigFindManyArgs";
import { FtpConfigWhereUniqueInput } from "./FtpConfigWhereUniqueInput";
import { FtpConfigUpdateInput } from "./FtpConfigUpdateInput";

export class FtpConfigControllerBase {
  constructor(protected readonly service: FtpConfigService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FtpConfig })
  async createFtpConfig(
    @common.Body() data: FtpConfigCreateInput
  ): Promise<FtpConfig> {
    return await this.service.createFtpConfig({
      data: data,
      select: {
        createdAt: true,
        host: true,
        id: true,
        password: true,
        port: true,
        remotePath: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FtpConfig] })
  @ApiNestedQuery(FtpConfigFindManyArgs)
  async ftpConfigs(@common.Req() request: Request): Promise<FtpConfig[]> {
    const args = plainToClass(FtpConfigFindManyArgs, request.query);
    return this.service.ftpConfigs({
      ...args,
      select: {
        createdAt: true,
        host: true,
        id: true,
        password: true,
        port: true,
        remotePath: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FtpConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async ftpConfig(
    @common.Param() params: FtpConfigWhereUniqueInput
  ): Promise<FtpConfig | null> {
    const result = await this.service.ftpConfig({
      where: params,
      select: {
        createdAt: true,
        host: true,
        id: true,
        password: true,
        port: true,
        remotePath: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FtpConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFtpConfig(
    @common.Param() params: FtpConfigWhereUniqueInput,
    @common.Body() data: FtpConfigUpdateInput
  ): Promise<FtpConfig | null> {
    try {
      return await this.service.updateFtpConfig({
        where: params,
        data: data,
        select: {
          createdAt: true,
          host: true,
          id: true,
          password: true,
          port: true,
          remotePath: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FtpConfig })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFtpConfig(
    @common.Param() params: FtpConfigWhereUniqueInput
  ): Promise<FtpConfig | null> {
    try {
      return await this.service.deleteFtpConfig({
        where: params,
        select: {
          createdAt: true,
          host: true,
          id: true,
          password: true,
          port: true,
          remotePath: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
