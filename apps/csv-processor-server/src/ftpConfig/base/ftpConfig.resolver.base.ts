/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FtpConfig } from "./FtpConfig";
import { FtpConfigCountArgs } from "./FtpConfigCountArgs";
import { FtpConfigFindManyArgs } from "./FtpConfigFindManyArgs";
import { FtpConfigFindUniqueArgs } from "./FtpConfigFindUniqueArgs";
import { CreateFtpConfigArgs } from "./CreateFtpConfigArgs";
import { UpdateFtpConfigArgs } from "./UpdateFtpConfigArgs";
import { DeleteFtpConfigArgs } from "./DeleteFtpConfigArgs";
import { FtpConfigService } from "../ftpConfig.service";
@graphql.Resolver(() => FtpConfig)
export class FtpConfigResolverBase {
  constructor(protected readonly service: FtpConfigService) {}

  async _ftpConfigsMeta(
    @graphql.Args() args: FtpConfigCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FtpConfig])
  async ftpConfigs(
    @graphql.Args() args: FtpConfigFindManyArgs
  ): Promise<FtpConfig[]> {
    return this.service.ftpConfigs(args);
  }

  @graphql.Query(() => FtpConfig, { nullable: true })
  async ftpConfig(
    @graphql.Args() args: FtpConfigFindUniqueArgs
  ): Promise<FtpConfig | null> {
    const result = await this.service.ftpConfig(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FtpConfig)
  async createFtpConfig(
    @graphql.Args() args: CreateFtpConfigArgs
  ): Promise<FtpConfig> {
    return await this.service.createFtpConfig({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FtpConfig)
  async updateFtpConfig(
    @graphql.Args() args: UpdateFtpConfigArgs
  ): Promise<FtpConfig | null> {
    try {
      return await this.service.updateFtpConfig({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FtpConfig)
  async deleteFtpConfig(
    @graphql.Args() args: DeleteFtpConfigArgs
  ): Promise<FtpConfig | null> {
    try {
      return await this.service.deleteFtpConfig(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
