/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FtpConfig as PrismaFtpConfig } from "@prisma/client";

export class FtpConfigServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FtpConfigCountArgs, "select">
  ): Promise<number> {
    return this.prisma.ftpConfig.count(args);
  }

  async ftpConfigs(
    args: Prisma.FtpConfigFindManyArgs
  ): Promise<PrismaFtpConfig[]> {
    return this.prisma.ftpConfig.findMany(args);
  }
  async ftpConfig(
    args: Prisma.FtpConfigFindUniqueArgs
  ): Promise<PrismaFtpConfig | null> {
    return this.prisma.ftpConfig.findUnique(args);
  }
  async createFtpConfig(
    args: Prisma.FtpConfigCreateArgs
  ): Promise<PrismaFtpConfig> {
    return this.prisma.ftpConfig.create(args);
  }
  async updateFtpConfig(
    args: Prisma.FtpConfigUpdateArgs
  ): Promise<PrismaFtpConfig> {
    return this.prisma.ftpConfig.update(args);
  }
  async deleteFtpConfig(
    args: Prisma.FtpConfigDeleteArgs
  ): Promise<PrismaFtpConfig> {
    return this.prisma.ftpConfig.delete(args);
  }
}
